#!/bin/bash

# To run our code, we must have it in our classpath.
# We use $(ls target/*.jar) instead of target/tpcdi-1.0.jar so that
# this script can be reused in other projects more easily.

TARGET=$(ls target/*.jar 2>/dev/null)
if [ -z "$TARGET" ]; then
    echo "No jar file in target/, try 'mvn package'".
    exit 1
fi

# In the pom.xml, we've already explained other what libraries we
# depend on. Maven downloaded them, and put them "somewhere" (our
# repository). Now we ask maven to build up the CLASSPATH that let us
# run against those libraries.

# First, we put the CLASSPATH in .classpath if the pom.xml is newer
# than out existing .classpath file. (We avoid this command if
# .classpath is fresh, since it's rather slow.)
if [ ! .mvn-classpath -nt pom.xml ]; then
  mvn dependency:build-classpath -Dmdep.outputFile=.mvn-classpath -q
fi

# Now, we set $CP to the contents of the .classpath file.
CP=$(cat .mvn-classpath)

# The funny symbol: "$@" passes the command-line arguments on from
# this script to your Java program.

java -cp $TARGET:$CP edu.brown.cs.tpcdi.Main "$@"
